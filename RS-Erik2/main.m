clc;
clear all;
StartTime=tic;

iterations=10;

NW=64;          %number of available wavelengths
N=NW;           %AWG port count
K=16;           %K+1 is coupler port count
P=1;           %probability of a connection request on each input port
LP=0.75;        %probability that a connection's destination is locally selected

R=1;            %photodetector responsivity (A/W)
KB=1.38e-23;            %Boltzmann constant (J/A)
T=300;          %receiver temperature (K)
Fe=10^(5/10);            %receiver amplifier noise figure
RL=50;          %load
q=1.6e-19;      %electron charge
RIN=10^(-145/10);           %average RIN spectral density
hv=(6.626068e-34)*(2e8)/(1.55e-6);           %energy of a photon
Fo=10^(5/10);            %apmlifier 1 (EDFA) noise figure
Bo=5e10;            %optical filter bandwidth
Be=2.8e10;            %electrical filter bandwidth (28 GHz)
sigma0=Be/(2*sqrt(2*log(2)));         %paramter used to calculate inter-band crosstalk
GC=10^(-(3*log2(K)+1)/10);          %32 port star coupler gain
GA=10^(-6/10);          %64 port AWG gain
GF=10^(-3/10);         %receiver tunable filter gain 
GW=10^(-6/10);          %WSS gain
AAXR=10^(-31/10);            %AWG adjacent crosstalk ratio
ANXR=10^(-43/10);            %AWG non-adjacent crosstalk ratio
Ps_avg=(10^((5-30)/10));      %average transmit power in W (3 dBm)
ER=10^(10/10);           %Extinction ratio: ratio of max power level to min power level
%G1=10^(16/10);      %EDFA gain
%G2=10^(18/10);      %EDFA gain
%N1=Fo*hv*(G1-1)*Bo;         %power of ASE noise generated by EDFA
%N2=Fo*hv*(G2-1)*Bo;         %power of ASE noise generated by EDFA
%G_Path=GC*G1*GW*GA*G2*GC*GF;
%P_ASE=N1*GW*GA*G2*GC*GF+N2*GC*GF;

G1=1/GC;      %EDFA gain
G2=10^(0/10);      %EDFA gain
G3=1/(GC);      %EDFA gain
G4=10^(0/10);      %EDFA gain
N1=(10^(6/10))*hv*(G1-1)*Bo;         %power of ASE noise generated by EDFA
N2=Fo*hv*(G2-1)*Bo;         %power of ASE noise generated by EDFA
N3=Fo*hv*(G3-1)*Bo;         %power of ASE noise generated by EDFA
N4=Fo*hv*(G4-1)*Bo;         %power of ASE noise generated by EDFA
G_Path=GC*GW*GA*GC*GF*G1*G2*G3*G4;
P_ASE=N1*GC*G2*GW*GA*G3*GC*G4*GF+N2*GW*GA*G3*GC*G4*GF+N3*GC*G4*GF+N4*GF;


postFEC=1e-12;          %desired BER at receiver
preFECmax=1e-2;
rate1=0.9;
rate2=0.8;

M=4;            %M-PAM signaling
CR=Be*log2(M);          %channel rate
Prob=zeros(M,M);       %Prob(i,j) is the probability of sending symbol i and detecting symbol j
label=zeros(M,log2(M));         %the bits mapped to symbols
label(1,:)=[0,0];
label(2,:)=[0,1];
label(3,:)=[1,1];
label(4,:)=[1,0];
% label(1,:)=[0,0,0];
% label(2,:)=[0,0,1];
% label(3,:)=[0,1,1];
% label(4,:)=[0,1,0];
% label(5,:)=[1,1,0];
% label(6,:)=[1,1,1];
% label(7,:)=[1,0,1];
% label(8,:)=[1,0,0];

d=zeros(M,M);       %hamming distance between labels of symbols i and j
for i=1:M
    for j=1:M
        count=0;
        if i~=j
            for k=1:log2(M)
                if label(i,k)~=label(j,k)
                    count=count+1;
                end
            end
            d(i,j)=count;
        end
    end
end

Ps=zeros(1,M);
for i=1:M
    Ps(i)=((2*Ps_avg)/(ER+1))*(1+(((i-1)*(ER-1))/(M-1)));
end

Pr=zeros(2,M);          %Pr(i,j) is the received signal power per symbol j (i=1: local connection, i=2: remote connection)
%received power per symbol
for i=1:M
    Pr(1,i)=Ps(i)*GC*GF*G1*G4;
    Pr(2,i)=Ps(i)*G_Path; 
end

csum=zeros(1,2);
for i=1:M
    csum(1)=csum(1)+Pr(1,i)^2;
    csum(2)=csum(2)+Pr(2,i)^2;
end
csum=csum*(R*R/M);

I=zeros(2,M);
%average photocurrent values
for i=1:M
    I(1,i)=R*Pr(1,i);
    I(2,i)=R*Pr(2,i);
end

%decision thresholds: t(i) is the threshold between symbols i and i-1()
t=zeros(1,M+1);
t(1)=-inf;
t(M+1)=inf;

HL=14;          %header length
%each node (server) has the following information fields
% 1) connection type: 0 (no connection), 1 (local connection), 2(global)
% 2) destination cluster
% 3) destination node in destination cluster
% 4) connection blocked (0: no, 1: yes)
% 5) node transmit wavelength
% 6) node receive wavelength
% 7) adjacent xtalk terms
% 8) nonadjacent xtalk terms
% 9) optical in-band crosstalk power
%10) out-of-band crosstalk noise variance
%11) BER (preFEC)
%12) net capacity with up to at most 10% overhead 
%13) net capacity with up to at most 20% overhead 
%14) net capacity with preFEC BER less than 10^-2

sigma2_s_sp=zeros(1,M);
sigma2_sp_sp=zeros(1,M);
sigma2_T=zeros(1,M);
sigma2_S=zeros(1,M);
sigma2_I=zeros(1,M);
sigma2_s_xtalk=zeros(1,M);
sigma2_xtalk_xtalk=zeros(1,M);
sigma2_sp_xtalk=zeros(1,M);
sigma2_OB_OB=zeros(1,M);
sigma=zeros(1,M);


BER=zeros(1,iterations);
ConnectionCount=zeros(1,iterations);
LocalConnectionCount=zeros(1,iterations);
GlobalConnectionCount=zeros(1,iterations);
TotalDrops=zeros(1,iterations);
LocalDrops=zeros(1,iterations);
GlobalDrops=zeros(1,iterations);

for it=1:iterations
    it
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
CStage=zeros(N*K,HL);       %CStage(i,:) denotes information regarding node i 
GRequest=zeros(N*K,N+1);         %GRequest(i,j)=1 if there is at least a request from input cluser j to output port i
wavelength=zeros(N,NW);         %wavelength(i,j)=1 if wavelength j in coupler i is occupied

%generate traffic
for i=1:N
    for j=1:K
        u=rand;
        if u<=P             %a connection request exists
            ConnectionCount(it)=ConnectionCount(it)+1;
            u=rand;
            if u<=LP
                LocalConnectionCount(it)=LocalConnectionCount(it)+1;
                CStage((i-1)*K+j,1)=1;        %local connection
                CStage((i-1)*K+j,2)=i;        %destination is within the same coupler
                D=1:K;
                D(j)=0;
                index=find(D>0);
                CStage((i-1)*K+j,3)=index(ceil(length(index)*rand));
            else
                GlobalConnectionCount(it)=GlobalConnectionCount(it)+1;
                CStage((i-1)*K+j,1)=2;            %global connection
                D=1:N;
                D(i)=0;
                index=find(D>0);
                CStage((i-1)*K+j,2)=index(ceil(length(index)*rand));
                CStage((i-1)*K+j,3)=ceil(K*rand);
                %a non-local connection is added to the desired output
                if GRequest((CStage((i-1)*K+j,2)-1)*K+CStage((i-1)*K+j,3),i)==0
                    GRequest((CStage((i-1)*K+j,2)-1)*K+CStage((i-1)*K+j,3),i)=1;
                    GRequest((CStage((i-1)*K+j,2)-1)*K+CStage((i-1)*K+j,3),N+1)=GRequest((CStage((i-1)*K+j,2)-1)*K+CStage((i-1)*K+j,3),N+1)+1;
                end  
            end
        end
    end
end

%allocate resources to inter-domain connections
for i=1:N           %destination cluster index
    
    flag=1;
    while flag==1           %until all destination ports are serviced
        temp=GRequest((i-1)*K+1:i*K,N+1);
        temp1=find(temp>0);
        minval=min(temp(temp1));
        if minval>0
            destcandidate=find(temp==minval);
            destnode=destcandidate(ceil(length(destcandidate)*rand));
            list=GRequest((i-1)*K+destnode,1:N);
            temp=find(list>0);
            src=temp(ceil(length(temp)*rand));          
            lambda=N-mod(1-src-i,N);
            if  wavelength(src,lambda)==0 &&  wavelength(i,lambda)==0
                temp=find(CStage((src-1)*K+1:src*K,1)==2 & CStage((src-1)*K+1:src*K,2)==i & CStage((src-1)*K+1:src*K,3)==destnode & CStage((src-1)*K+1:src*K,4)==0 & CStage((src-1)*K+1:src*K,5)==0);
                sourcenode=temp(ceil(length(temp)*rand));
                CStage((src-1)*K+sourcenode,5)=lambda;
                CStage((i-1)*K+destnode,6)=lambda;
                wavelength(src,lambda)=1;
                wavelength(i,lambda)=1;
                GRequest((i-1)*K+destnode,:)=0;
                for j=1:K
                    if GRequest((i-1)*K+j,src)==1
                        GRequest((i-1)*K+j,src)=0;
                        GRequest((i-1)*K+j,N+1)=GRequest((i-1)*K+j,N+1)-1;
                    end
                end
                for j=1:K
                    if CStage((src-1)*K+j,1)==2 && CStage((src-1)*K+j,2)==i && CStage((src-1)*K+j,5)==0 && CStage((src-1)*K+j,4)==0
                        CStage((src-1)*K+j,4)=1;          %connection blocked
                    end
                end
            else
                GRequest((i-1)*K+destnode,N+1)=GRequest((i-1)*K+destnode,N+1)-1;
                GRequest((i-1)*K+destnode,src)=0;
            end            
        else 
            flag=0;
        end
    end
 
end
     
for i=1:N
    for j=1:K
        if CStage((i-1)*K+j,1)==2 && CStage((i-1)*K+j,5)==0
            CStage((i-1)*K+j,4)=1;
            GlobalDrops(it)=GlobalDrops(it)+1;
        end
    end
end

%allocate resources to intra-domain connections
for i=1:N
    for j=1:K
        temp=find(CStage((i-1)*K+1:i*K,1)==1 & CStage((i-1)*K+1:i*K,3)==j)';
        aw=find(wavelength(i,:)==0);
        if length(temp)>0 && length(aw)>0 && CStage((i-1)*K+j,6)==0
            src=temp(ceil(length(temp)*rand));
            w=aw(1);            %first-fit assignment
            CStage((i-1)*K+src,5)=w;
            CStage((i-1)*K+j,6)=w;
            wavelength(i,w)=1;
        end
    end
 
    for j=1:K
         if CStage((i-1)*K+j,1)==1 && CStage((i-1)*K+j,5)==0
            CStage((i-1)*K+j,4)=1;
            LocalDrops(it)=LocalDrops(it)+1;
        end
    end
end

TotalDrops(it)=GlobalDrops(it)+LocalDrops(it);

Mask=zeros(N,N);           %Row i is the mask used to check the ports adjacent to port i 
for i=1:N
    if i==1
        Mask(i,2)=1;
        Mask(i,N)=1;
    elseif i==N
         Mask(i,1)=1;
         Mask(i,i-1)=1;
    else
        Mask(i,i-1)=1;
        Mask(i,i+1)=1;
    end
end
Mask=Mask';

AWG=zeros(N,NW,HL);
for i=1:N
    Coupler=CStage((i-1)*K+1:i*K,:);
    Xtalk=find(Coupler(:,1)==2 & Coupler(:,4)==0);
    XLength=length(Xtalk);
    for k=1:XLength
        j=Xtalk(k);  
        AWG(i,Coupler(j,5),:)=Coupler(j,:);
    end
end
      
%crosstalk terms due to AWG
for i=1:N
    Xtalk=find(AWG(:,i,1)==2);
    XLength=length(Xtalk);
    for j=1:XLength
        k=Xtalk(j);         %Index of the packet whose crosstalk is to be found
        Adjacent=length(find(AWG(:,i,5).*Mask(:,k)==i));
        Nonadjacent=length(find(AWG(:,i,5)==i))-Adjacent-1;            %Number of non-adjacent crosstalk terms
        AWG(k,i,7)=Adjacent;
        AWG(k,i,8)=Nonadjacent;
        Coupler=CStage((k-1)*K+1:k*K,:);
        index=find(Coupler(:,1)==2 & Coupler(:,4)==0 & Coupler(:,5)==i);
        CStage((k-1)*K+index,7)=Adjacent;
        CStage((k-1)*K+index,8)=Nonadjacent;
        CStage((k-1)*K+index,9)=(Adjacent*AAXR+Nonadjacent*ANXR)*Ps_avg*G_Path;         %average xtalk power
    end
end

OChannel=zeros(N,NW);             %Ochannel(i,j)=1(2) if wavelength j is available in coupler i originating from a local (far) source node
for i=1:N*K
    if CStage(i,5)>0
        OChannel(ceil(i/K),CStage(i,5))=1;
    end
    if CStage(i,6)>0
        OChannel(ceil(i/K),CStage(i,6))=1;
    end 
end

for i=1:N*K
  if CStage(i,1)==2 && CStage(i,5)>0
        OChannel(CStage(i,2),CStage(i,5))=2;
  end
end

%calculating out-of-band crosstalk impact

for i=1:N
    for j=1:K
        for x=1:NW
            if CStage((i-1)*K+j,6)>0 && CStage((i-1)*K+j,6)~=x
                if OChannel(i,x)==1
                    CStage((i-1)*K+j,10)=CStage((i-1)*K+j,10)+csum(1)*exp(-(((CStage((i-1)*K+j,6)-x)*Bo)/sigma0)^2);
                elseif OChannel(i,x)==2
                    CStage((i-1)*K+j,10)=CStage((i-1)*K+j,10)+csum(2)*exp(-(((CStage((i-1)*K+j,6)-x)*Bo)/sigma0)^2);
                end
            end
        end
    end
end

%BER calculation per connection
for i=1:N*K
  if CStage(i,1)>0 && CStage(i,4)==0        %an established connection
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%  
      for j=1:M
          if CStage(i,1)==2
              sigma2_s_sp(j)=2*R*R*Pr(CStage(i,1),j)*P_ASE*Be/Bo;
              sigma2_sp_sp(j)=0.5*R*R*P_ASE*P_ASE*Be*(2*Bo-Be)/(Bo^2);
              sigma2_s_xtalk(j)=2*R*R*Pr(CStage(i,1),j)*CStage(i,9);
              sigma2_xtalk_xtalk(j)=R*R*CStage(i,9)*CStage(i,9);
              sigma2_sp_xtalk(j)=2*R*R*CStage(i,9)*P_ASE*Be/Bo; 
              %sigma2_s_xtalk(j)=0;
              %sigma2_xtalk_xtalk(j)=0;
              %sigma2_sp_xtalk(j)=0;
          else
              sigma2_s_sp(j)=0;
              sigma2_sp_sp(j)=0;
              sigma2_s_xtalk(j)=0;
              sigma2_xtalk_xtalk(j)=0;
              sigma2_sp_xtalk(j)=0;
          end
          sigma2_T(j)=4*KB*T*Fe*Be/RL;
          sigma2_S(j)=2*q*R*Pr(CStage(i,1),j)*Be;
          sigma2_I(j)=R*R*Pr(CStage(i,1),j)*Pr(CStage(i,1),j)*RIN*Be;
          sigma2_OB_OB(j)=CStage(i,10);  
          %sigma2_OB_OB(j)=0;   
      end
      
      for j=1:M
          sigma(j)=sqrt(sigma2_s_sp(j)+sigma2_sp_sp(j)+sigma2_s_xtalk(j)+sigma2_xtalk_xtalk(j)+sigma2_sp_xtalk(j)+sigma2_T(j)+sigma2_S(j)+sigma2_I(j)+sigma2_OB_OB(j));
      end
      
      for j=2:M
          as=sigma(j)^2-sigma(j-1)^2;
          bps=(I(CStage(i,1),j)*sigma(j-1)^2)-(I(CStage(i,1),j-1)*sigma(j)^2);
          deltaps=(sigma(j-1)^2*sigma(j)^2)*(((I(CStage(i,1),j)-I(CStage(i,1),j-1))^2)+(2*log(sigma(j)/sigma(j-1))*(sigma(j)^2-sigma(j-1)^2)));
          root1=(-bps-sqrt(deltaps))/as;
          root2=(-bps+sqrt(deltaps))/as;
          if I(CStage(i,1),j-1)<root1 && root1<I(CStage(i,1),j)
              t(j)=root1;
          elseif I(CStage(i,1),j-1)<root2 && root2<I(CStage(i,1),j)
              t(j)=root2;
          end
      end
      
      for x=1:M
          for y=1:M
              if x~=y
                  Prob(x,y)=0.5*erfc((t(y)-I(CStage(i,1),x))/(sigma(x)*sqrt(2)))-0.5*erfc((t(y+1)-I(CStage(i,1),x))/(sigma(x)*sqrt(2)));
              end
          end
      end
      
      BERtemp=0;
      for x=1:M
          for y=1:M
              if x~=y
                  BERtemp=BERtemp+(d(x,y)/log2(M))*Prob(x,y);
              end
          end
      end
      BERtemp=BERtemp/M;
      
      CStage(i,11)=BERtemp;          %BER with considering crosstalk
      
      if BERtemp<=preFECmax && BERtemp>=postFEC
         CodeRate=searchRateRS(BERtemp, postFEC);
      elseif BERtemp<postFEC
         CodeRate = 1;
      end

  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%      
  end
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
temp=find(CStage(:,11)~=0 & CStage(:,1)==2);
BER(it)=mean(CStage(temp,11));
end

ConnectionCount_avg=mean(ConnectionCount)
LocalConnectionCount_avg=mean(LocalConnectionCount)
GlobalConnectionCount_avg=mean(GlobalConnectionCount)
LocalDrops_avg=mean(LocalDrops)
GlobalDrops_avg=mean(GlobalDrops)
TotalDrops_avg=mean(TotalDrops)
drop_rate=100*TotalDrops_avg/ConnectionCount_avg
BER_avg=mean(BER)

%BER

ExecutionTime=toc(StartTime)/60